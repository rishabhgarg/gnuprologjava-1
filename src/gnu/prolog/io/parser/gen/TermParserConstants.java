/* Generated By:JavaCC: Do not edit this line. TermParserConstants.java */
package gnu.prolog.io.parser.gen;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface TermParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int LAYOUT_TEXT_SEQUENCE = 1;
  /** RegularExpression Id. */
  int LAYOUT_TEXT = 2;
  /** RegularExpression Id. */
  int COMMENT = 3;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 4;
  /** RegularExpression Id. */
  int BRACKETED_COMMENT = 5;
  /** RegularExpression Id. */
  int NAME_TOKEN = 6;
  /** RegularExpression Id. */
  int IDENTIFIER_TOKEN = 7;
  /** RegularExpression Id. */
  int ID_START = 8;
  /** RegularExpression Id. */
  int ID_CONTINUE = 9;
  /** RegularExpression Id. */
  int GRAPHIC_TOKEN = 10;
  /** RegularExpression Id. */
  int GRAPHIC_TOKEN_CHAR = 11;
  /** RegularExpression Id. */
  int QUOTED_TOKEN = 12;
  /** RegularExpression Id. */
  int SINGLE_QUOTED_ITEM = 13;
  /** RegularExpression Id. */
  int CONTINUATION_ESCAPE_SEQUENCE = 14;
  /** RegularExpression Id. */
  int SEMICOLON_TOKEN = 15;
  /** RegularExpression Id. */
  int CUT_TOKEN = 16;
  /** RegularExpression Id. */
  int SINGLE_QUOTED_CHAR = 17;
  /** RegularExpression Id. */
  int DOUBLE_QUOTED_CHAR = 18;
  /** RegularExpression Id. */
  int BACK_QUOTED_CHAR = 19;
  /** RegularExpression Id. */
  int NON_QUOTE_CHAR = 20;
  /** RegularExpression Id. */
  int META_ESCAPE_SEQUENCE = 21;
  /** RegularExpression Id. */
  int CONTROL_ESCAPE_SEQUENCE = 22;
  /** RegularExpression Id. */
  int SYMBOLIC_CONTROL_CHAR = 23;
  /** RegularExpression Id. */
  int SYMBOLIC_ALERT_CHAR = 24;
  /** RegularExpression Id. */
  int SYMBOLIC_BACKSPACE_CHAR = 25;
  /** RegularExpression Id. */
  int SYMBOLIC_FORM_FEED_CHAR = 26;
  /** RegularExpression Id. */
  int SYMBOLIC_NEW_LINE_CHAR = 27;
  /** RegularExpression Id. */
  int SYMBOLIC_HORIZONTAL_TAB_CHAR = 28;
  /** RegularExpression Id. */
  int SYMBOLIC_VERTICAL_TAB_CHAR = 29;
  /** RegularExpression Id. */
  int SYMBOLIC_CARRIAGE_RETURN_CHAR = 30;
  /** RegularExpression Id. */
  int SYMBOLIC_HEXADECIMAL_CHAR = 31;
  /** RegularExpression Id. */
  int OCTAL_ESCAPE_SEQUENCE = 32;
  /** RegularExpression Id. */
  int HEXADECIMAL_ESCAPE_SEQUENCE = 33;
  /** RegularExpression Id. */
  int VARIABLE_TOKEN = 34;
  /** RegularExpression Id. */
  int ANONYMOUS_VARIABLE = 35;
  /** RegularExpression Id. */
  int NAMED_VARIABLE = 36;
  /** RegularExpression Id. */
  int VARIABLE_INDICATOR_CHAR = 37;
  /** RegularExpression Id. */
  int INTEGER_TOKEN = 38;
  /** RegularExpression Id. */
  int INTEGER_CONSTANT = 39;
  /** RegularExpression Id. */
  int CHARACTER_CODE_CONSTANT = 40;
  /** RegularExpression Id. */
  int BINARY_CONSTANT = 41;
  /** RegularExpression Id. */
  int OCTAL_CONSTANT = 42;
  /** RegularExpression Id. */
  int HEXADECIMAL_CONSTANT = 43;
  /** RegularExpression Id. */
  int FLOAT_NUMBER_TOKEN = 44;
  /** RegularExpression Id. */
  int FRACTION = 45;
  /** RegularExpression Id. */
  int EXPONENT = 46;
  /** RegularExpression Id. */
  int CHAR_CODE_LIST_TOKEN = 47;
  /** RegularExpression Id. */
  int DOUBLE_QUOTED_ITEM = 48;
  /** RegularExpression Id. */
  int BACK_QUOTED_STRING = 49;
  /** RegularExpression Id. */
  int BACK_QUOTED_ITEM = 50;
  /** RegularExpression Id. */
  int OPEN_TOKEN = 51;
  /** RegularExpression Id. */
  int CLOSE_TOKEN = 52;
  /** RegularExpression Id. */
  int OPEN_LIST_TOKEN = 53;
  /** RegularExpression Id. */
  int CLOSE_LIST_TOKEN = 54;
  /** RegularExpression Id. */
  int OPEN_CURLY_TOKEN = 55;
  /** RegularExpression Id. */
  int CLOSE_CURLY_TOKEN = 56;
  /** RegularExpression Id. */
  int HEAD_TAIL_SEPARATOR_TOKEN = 57;
  /** RegularExpression Id. */
  int COMMA_TOKEN = 58;
  /** RegularExpression Id. */
  int END_TOKEN = 59;
  /** RegularExpression Id. */
  int END_CHAR = 60;
  /** RegularExpression Id. */
  int CHARARCTER = 61;
  /** RegularExpression Id. */
  int GRAPHIC_CHAR = 62;
  /** RegularExpression Id. */
  int GRAPHIC_CHAR_PERIOD = 63;
  /** RegularExpression Id. */
  int ALPHA_NUMERIC_CHAR = 64;
  /** RegularExpression Id. */
  int ALPHA_CHAR = 65;
  /** RegularExpression Id. */
  int LETTER_CHAR = 66;
  /** RegularExpression Id. */
  int CAPITAL_LETTER_CHAR = 67;
  /** RegularExpression Id. */
  int LL = 68;
  /** RegularExpression Id. */
  int LU = 69;
  /** RegularExpression Id. */
  int LM = 70;
  /** RegularExpression Id. */
  int MN = 71;
  /** RegularExpression Id. */
  int LT = 72;
  /** RegularExpression Id. */
  int LO = 73;
  /** RegularExpression Id. */
  int NL = 74;
  /** RegularExpression Id. */
  int MC = 75;
  /** RegularExpression Id. */
  int ND = 76;
  /** RegularExpression Id. */
  int PC = 77;
  /** RegularExpression Id. */
  int SMALL_LETTER_CHAR = 78;
  /** RegularExpression Id. */
  int DECIMAL_DIGIT_CHAR = 79;
  /** RegularExpression Id. */
  int BINARY_DIGIT_CHAR = 80;
  /** RegularExpression Id. */
  int OCTAL_DIGIT_CHAR = 81;
  /** RegularExpression Id. */
  int HEXADECIMAL_DIGIT_CHAR = 82;
  /** RegularExpression Id. */
  int UNDERSCORE_CHAR = 83;
  /** RegularExpression Id. */
  int SOLO_CHAR = 84;
  /** RegularExpression Id. */
  int CUT_CHAR = 85;
  /** RegularExpression Id. */
  int OPEN_CHAR = 86;
  /** RegularExpression Id. */
  int CLOSE_CHAR = 87;
  /** RegularExpression Id. */
  int COMMA_CHAR = 88;
  /** RegularExpression Id. */
  int SEMICOLON_CHAR = 89;
  /** RegularExpression Id. */
  int OPEN_LIST_CHAR = 90;
  /** RegularExpression Id. */
  int CLOSE_LIST_CHAR = 91;
  /** RegularExpression Id. */
  int OPEN_CURLY_CHAR = 92;
  /** RegularExpression Id. */
  int CLOSE_CURLY_CHAR = 93;
  /** RegularExpression Id. */
  int HEAD_TAIL_SEPARATOR_CHAR = 94;
  /** RegularExpression Id. */
  int END_LINE_COMMENT_CHAR = 95;
  /** RegularExpression Id. */
  int LAYOUT_CHAR = 96;
  /** RegularExpression Id. */
  int SPACE_CHAR = 97;
  /** RegularExpression Id. */
  int NEW_LINE_CHAR = 98;
  /** RegularExpression Id. */
  int META_CHAR = 99;
  /** RegularExpression Id. */
  int BACKSLASH_CHAR = 100;
  /** RegularExpression Id. */
  int SINGLE_QUOTE_CHAR = 101;
  /** RegularExpression Id. */
  int DOUBLE_QUOTE_CHAR = 102;
  /** RegularExpression Id. */
  int BACK_QUOTE_CHAR = 103;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<LAYOUT_TEXT_SEQUENCE>",
    "<LAYOUT_TEXT>",
    "<COMMENT>",
    "<SINGLE_LINE_COMMENT>",
    "<BRACKETED_COMMENT>",
    "<NAME_TOKEN>",
    "<IDENTIFIER_TOKEN>",
    "<ID_START>",
    "<ID_CONTINUE>",
    "<GRAPHIC_TOKEN>",
    "<GRAPHIC_TOKEN_CHAR>",
    "<QUOTED_TOKEN>",
    "<SINGLE_QUOTED_ITEM>",
    "<CONTINUATION_ESCAPE_SEQUENCE>",
    "<SEMICOLON_TOKEN>",
    "<CUT_TOKEN>",
    "<SINGLE_QUOTED_CHAR>",
    "<DOUBLE_QUOTED_CHAR>",
    "<BACK_QUOTED_CHAR>",
    "<NON_QUOTE_CHAR>",
    "<META_ESCAPE_SEQUENCE>",
    "<CONTROL_ESCAPE_SEQUENCE>",
    "<SYMBOLIC_CONTROL_CHAR>",
    "\"a\"",
    "\"b\"",
    "\"f\"",
    "\"n\"",
    "\"t\"",
    "\"v\"",
    "\"r\"",
    "\"x\"",
    "<OCTAL_ESCAPE_SEQUENCE>",
    "<HEXADECIMAL_ESCAPE_SEQUENCE>",
    "<VARIABLE_TOKEN>",
    "<ANONYMOUS_VARIABLE>",
    "<NAMED_VARIABLE>",
    "<VARIABLE_INDICATOR_CHAR>",
    "<INTEGER_TOKEN>",
    "<INTEGER_CONSTANT>",
    "<CHARACTER_CODE_CONSTANT>",
    "<BINARY_CONSTANT>",
    "<OCTAL_CONSTANT>",
    "<HEXADECIMAL_CONSTANT>",
    "<FLOAT_NUMBER_TOKEN>",
    "<FRACTION>",
    "<EXPONENT>",
    "<CHAR_CODE_LIST_TOKEN>",
    "<DOUBLE_QUOTED_ITEM>",
    "<BACK_QUOTED_STRING>",
    "<BACK_QUOTED_ITEM>",
    "<OPEN_TOKEN>",
    "<CLOSE_TOKEN>",
    "<OPEN_LIST_TOKEN>",
    "<CLOSE_LIST_TOKEN>",
    "<OPEN_CURLY_TOKEN>",
    "<CLOSE_CURLY_TOKEN>",
    "<HEAD_TAIL_SEPARATOR_TOKEN>",
    "<COMMA_TOKEN>",
    "<END_TOKEN>",
    "\".\"",
    "<CHARARCTER>",
    "<GRAPHIC_CHAR>",
    "<GRAPHIC_CHAR_PERIOD>",
    "<ALPHA_NUMERIC_CHAR>",
    "<ALPHA_CHAR>",
    "<LETTER_CHAR>",
    "<CAPITAL_LETTER_CHAR>",
    "<LL>",
    "<LU>",
    "<LM>",
    "<MN>",
    "<LT>",
    "<LO>",
    "<NL>",
    "<MC>",
    "<ND>",
    "<PC>",
    "<SMALL_LETTER_CHAR>",
    "<DECIMAL_DIGIT_CHAR>",
    "<BINARY_DIGIT_CHAR>",
    "<OCTAL_DIGIT_CHAR>",
    "<HEXADECIMAL_DIGIT_CHAR>",
    "\"_\"",
    "<SOLO_CHAR>",
    "\"!\"",
    "\"(\"",
    "\")\"",
    "\",\"",
    "\";\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\"|\"",
    "\"%\"",
    "<LAYOUT_CHAR>",
    "<SPACE_CHAR>",
    "<NEW_LINE_CHAR>",
    "<META_CHAR>",
    "\"\\\\\"",
    "\"\\\'\"",
    "\"\\\"\"",
    "\"`\"",
  };

}
